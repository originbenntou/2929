type Query {
  trendSearch(keyword: String!): Int!
  trendHistory: [History]!
  trendSuggest(suggestId: Int!): [Suggest!]!
}

type History {
  suggestId: Int!
  status: Progress!
}

enum Progress {
  INPROGRESS
  COMPLETED
}

type Suggest {
  keyword: String!
  childSuggests: [ChildSuggest!]!
}

type ChildSuggest {
  word: String!
  growth: Growth!
  graphs: [Graph!]!
}

type Growth {
  short: Arrow!
  midium: Arrow!
  long: Arrow!
}

type Graph {
  date: DateTime!
  value: Float!
}

enum Arrow {
  Up
  Flat
  Down
}

scalar DateTime
