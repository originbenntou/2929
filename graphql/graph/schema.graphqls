type Query {
  verifyUser(user: User!): Boolean!
  findTrend(word: String!): [Suggest!]!
}

type Mutation {
  createUser(user: User!): Boolean!
}

input User {
  email: String!
  password: String!
}

type Suggest {
  word: String!
  childSuggests: [ChildSuggest!]!
}

type ChildSuggest {
  word: String!
  growth: Growth!
  graphs: [Graph!]!
}

type Growth {
  short: Arrow!
  midium: Arrow!
  long: Arrow!
}

type Graph {
  date: DateTime!
  value: Float!
}

enum Arrow {
  Up
  Flat
  Down
}

scalar DateTime
