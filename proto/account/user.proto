syntax = "proto3";

package account;

option go_package = "github.com/originbenntou/2929BE/proto/account/go";

import "github.com/mwitkow/go-proto-validators/validator.proto";

message User {
    uint64 id = 1;
    string email = 2;
    string name = 4;
    uint64 company_id = 5;
}

message RegisterUserRequest {
    string email = 1 [(validator.field) = {string_not_empty: true regex: "^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$"}];
    string password = 2 [(validator.field) = {string_not_empty: true regex: "^[ -~]{8,32}$"}];
    string name = 3 [(validator.field) = {string_not_empty: true length_lt:255}];
    uint64 company_id = 4 [(validator.field) = {int_gt: 0}];
}

message RegisterUserResponse {
    uint64 user_id = 1;
}

message VerifyUserRequest {
    string email = 1 [(validator.field) = {string_not_empty: true regex: "^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$"}];
    string password = 2 [(validator.field) = {string_not_empty: true regex: "^[ -~]{8,32}$"}];
}

message VerifyUserResponse {
    string token = 1;
}

//message FindUserRequest {
//    uint64 userId = 1 [(validator.field) = {string_not_empty: true int_gt: 1}];
//}
//
//message FindUserResponse {
//    string email = 1;
//}

service UserService {
    rpc RegisterUser (RegisterUserRequest) returns (RegisterUserResponse);
    rpc VerifyUser (VerifyUserRequest) returns (VerifyUserResponse);
//    rpc FindUser (FindUserRequest) returns (FindUserResponse);
}
